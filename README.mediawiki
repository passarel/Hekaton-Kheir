The Hecatonchires, or Hekatonkheires, were three gargantuan figures of Greek mythology. Their name derives from the Greek hekaton ("hundred") and kheir ("hand"), and means "Hundred-Handed", "each of them having a hundred hands and fifty heads" (Bibliotheca). They were giants of incredible strength and ferocity, even superior to that of the Titans and the Cyclopes. They were children of Gaia and Uranus, simply the issue of Earth and Sky. Soon after they were born, their father, Uranus, threw them into the depths of Tartarus because he saw them as hideous monsters. (Source: wikipedia.org).

The Hekatonkheir project consists, basically, of a set of different resources to visualize and configure architectures of artificial neural networks (ANN) and of a (not so much) user-friendly interface to perform training, validation (according the method of cross validation) and application of the network, catering from different steps from handling the sets of input data until the visualization of the performance of the process. In terms of applications, it presents a series of interfaces to handle the integration with a logic programming language as well as dealing with representation and learning of temporal structures such as transition maps.

This project started at September, 2005, as a work for a post-graduate discipline. The main objective was to generate a visual interface to ANNs, allowing more clarity to visualize and edit specific configurations of them. Since then, different ideas has been incorporated to the project, with the main goal of integrating with neural-symbolic integration and applications in software engineering.

The name Hekatonkheir (maybe Frankenstein would be more adequated) is due the great amount of diferent modules and funcionalities integrated. When the first integrated tests were run, - and several bugs appeared, making me notice what a hideous monster that I had created - the image of Uranus when the Hekatonkheires were born came into my mind. Once, I told to a friend that finding a bug on the project was like find a flea behind the ear of a Hekatonkheir without knowing which head (the term "flea behind the ear" is a slang in Brazil, used to describe when somebody is worried or suspecting of something wrong).

This is an initial documentation for helping new users to start using the available functionalities, organized in the form of a "how-to". The following processes were defined until now:

* Creating and configuring a new neural network, with or without BG knowledge
* Training and validating a neural network
* Visualizing charts
* Learning state diagrams    

== How to ==

In this document, we expect to explain, in general, how to use some of the resources provided by the tool in order to generate neural network, train them and analyse the results of the application of the network in test cases.

=== Creating and configuring a neural network ===

[[image:http://github.com/passarel/Hekaton-Kheir/raw/master/doc/images/mainWindow.jpg|frame|Main window of Hekaton Kheir]]

[[image:http://github.com/passarel/Hekaton-Kheir/raw/master/doc/images/netWizard.jpg|frame|Main window of Hekaton Kheir]]

=== Editing input files ===

[[image:http://github.com/passarel/Hekaton-Kheir/raw/master/doc/images/fileConfig.jpg|frame|Main window of Hekaton Kheir]]

=== Training and validating a network ===

[[image:http://github.com/passarel/Hekaton-Kheir/raw/master/doc/images/trainConfig.jpg|frame|Main window of Hekaton Kheir]]

[[image:http://github.com/passarel/Hekaton-Kheir/raw/master/doc/images/trainEvolution.jpg|frame|Main window of Hekaton Kheir]]

=== Analysing results ===

[[image:http://github.com/passarel/Hekaton-Kheir/raw/master/doc/images/chartConfig.jpg|frame|Main window of Hekaton Kheir]]

[[image:http://github.com/passarel/Hekaton-Kheir/raw/master/doc/images/chartVisual.jpg|frame|Main window of Hekaton Kheir]]

== Temporal Models of Knowledge

The most important feature of Hekaton Kheir consists on its support to the integration of symbolic sources of knowledge. In this section, we illustrate this features through the semi-automated process of integrating the learning capabilities of Hekaton Kheir neural networks with [http://nusmv.fbk.eu/ NuSMV model checker]. To this case, we will consider an example based on the configuration of a Pump System, in which signals from the environment are used to 

== Compiling the source ==

The Hekaton Kheir project is a software for academic and personal use, with open source (GPL license) and developed in Delphi Personal 7. In order to run the project in Delphi, however, some other libraries and components should be installed

* ImpStringGrid: developed by... available in...
* JEDI (JCL and JVCL), version...
* OpenXML...
* PngImage...
* SimpleGraph...
* XDOM...
